{"version":3,"sources":["domain/user/component/SignupForm.tsx","domain/user/container/Signup.tsx","page/Signup.tsx","component/Alert.tsx","component/PrimaryButton.tsx","component/ErrorFieldForm.tsx"],"names":["validationSchema","Yup","fullName","required","NAME_REQUIRED","email","EMAIL_REQUIRED","phone","matches","phoneRegExp","INVALID_PHONE","PHONE_REQUIRED","password","PASSWORD_REQUIRED","confirmPassword","CONFIRM_PASSWORD_REQUIRED","oneOf","MATCH_PASSWORD","SignupForm","onSignup","closeError","errorMessage","loading","signIn","classes","useStyles","initialValues","onSubmit","values","errors","touched","handleChange","handleSubmit","className","form","Typography","variant","color","TextField","margin","id","label","type","name","value","onChange","size","fullWidth","ErrorFieldForm","PrimaryButton","Alert","message","open","onClose","REGISTERED","FakeNavLink","onClick","CLICK_ME","makeStyles","theme","display","flexDirection","justifyContent","alignItems","customTheme","spacing","big","padding","border","grayLight4","borderRadius","width","bigger","submit","medium","primary","Signup","client","useApolloClient","push","useHistory","useSignUpMutation","signUpFn","useState","setAlertError","useCallback","undefined","handleSignup","variables","update","cache","data","writeQuery","query","CurrentUserDocument","currentUser","signUp","then","resetStore","set","token","catch","error","graphQLErrors","map","join","SignupPage","ContainerPage","severity","rest","autoHideDuration","elevation","children","button","small","smaller","white","component","primaryDark","alignSelf","fontSize","font"],"mappings":"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","file":"static/js/12.378904ce.chunk.js","sourcesContent":["import { TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { Form, Formik } from 'formik';\nimport React from 'react';\nimport * as Yup from 'yup';\nimport Alert from '../../../component/Alert';\nimport { ErrorFieldForm } from '../../../component/ErrorFieldForm';\nimport FakeNavLink from '../../../component/Header/FakeNavLink';\nimport { PrimaryButton } from '../../../component/PrimaryButton';\nimport customTheme from '../../../theme';\nimport { CLICK_ME, CONFIRM_PASSWORD_REQUIRED, EMAIL_REQUIRED, INVALID_PHONE, MATCH_PASSWORD, NAME_REQUIRED, PASSWORD_REQUIRED, phoneRegExp, PHONE_REQUIRED, REGISTERED } from '../../../utils/constants';\nimport { SignupInitValue, SignupInput } from '../container/Signup';\n\ninterface Props {\n    onSignup: (values: SignupInput) => void;\n    closeError: () => void;\n    errorMessage?: string;\n    loading?: boolean;\n    signIn: () => void;\n}\n\nconst getInitValue = (): SignupInitValue => {\n    return {\n        fullName: '',\n        email: '',\n        phone: '',\n        password: '',\n        confirmPassword: '',\n    }\n}\n\nconst validationSchema = Yup.object({\n    fullName: Yup.string().required(NAME_REQUIRED),\n    email: Yup.string().email().required(EMAIL_REQUIRED),\n    phone: Yup.string().matches(phoneRegExp, INVALID_PHONE).required(PHONE_REQUIRED),\n    password: Yup.string().required(PASSWORD_REQUIRED),\n    confirmPassword: Yup.string().required(CONFIRM_PASSWORD_REQUIRED).oneOf([Yup.ref('password'), ''], MATCH_PASSWORD)\n});\n\nexport const SignupForm = ({ onSignup, closeError, errorMessage, loading, signIn }: Props) => {\n    const classes = useStyles()\n    return (\n        <Formik\n            initialValues={getInitValue()}\n            validationSchema={validationSchema}\n            onSubmit={(values) => {\n                onSignup(values)\n            }}\n        >\n            {({ values, errors, touched, handleChange, handleSubmit }) => (\n                <Form className={classes.form} onSubmit={handleSubmit} >\n                    <Typography variant={'h3'} color={'textPrimary'} > Signup </Typography>\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        id=\"fullName\"\n                        label=\"Full Name\"\n                        type=\"text\"\n                        name=\"fullName\"\n                        value={values.fullName}\n                        onChange={handleChange}\n                        size={'small'}\n                        fullWidth\n                    />\n                    {errors.fullName && touched.fullName ? (<ErrorFieldForm name={'fullName'} />) : null}\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        id=\"email\"\n                        label=\"Email\"\n                        type=\"email\"\n                        name=\"email\"\n                        size={'small'}\n                        value={values.email}\n                        onChange={handleChange}\n                        fullWidth\n                    />\n                    {errors.email && touched.email ? (<ErrorFieldForm name={'email'} />) : null}\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        id=\"phone\"\n                        label=\"Phone number\"\n                        type=\"phone\"\n                        name=\"phone\"\n                        size={'small'}\n                        value={values.phone}\n                        onChange={handleChange}\n                        fullWidth\n                    />\n                    {errors.phone && touched.phone ? (<ErrorFieldForm name={'phone'} />) : null}\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        id=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        name=\"password\"\n                        size={'small'}\n                        value={values.password}\n                        onChange={handleChange}\n                        fullWidth\n                    />\n                    {errors.password && touched.password ? (<ErrorFieldForm name={'password'} />) : null}\n                    <TextField\n                        variant=\"outlined\"\n                        margin=\"dense\"\n                        id=\"confirmPassword\"\n                        label=\"Confirm Password\"\n                        type=\"password\"\n                        name=\"confirmPassword\"\n                        size={'small'}\n                        value={values.confirmPassword}\n                        onChange={handleChange}\n                        fullWidth\n                    />\n                    {errors.confirmPassword && touched.confirmPassword ? (<ErrorFieldForm name={'confirmPassword'} />) : null}\n                    <PrimaryButton loading={loading} type={'submit'} >Submit</PrimaryButton>\n                    <Alert\n                        message={errorMessage}\n                        open={!!errorMessage}\n                        onClose={closeError}\n                    />\n                    <div>{REGISTERED}<FakeNavLink className={classes.signIn} onClick={signIn}>{CLICK_ME}</FakeNavLink></div>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nconst useStyles = makeStyles(theme => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        margin: `${customTheme.spacing.margin.big} auto`,\n        padding: `${customTheme.spacing.padding.big}`,\n        border: `1px solid ${customTheme.color.grayLight4}`,\n        borderRadius: '5px',\n        '@media (min-width: 700px)': {\n            width: '40%',\n            margin: `${customTheme.spacing.margin.bigger} auto`,\n        },\n        '@media (min-width: 800px)': {\n            width: '35%'\n        }\n    },\n    submit: {\n        margin: `${customTheme.spacing.margin.medium} auto`,\n        padding: `${customTheme.spacing.margin.bigger} auto`\n    },\n    signIn:{\n        color:customTheme.color.primary\n    }\n}));","import { ApolloError } from 'apollo-boost';\nimport { set } from 'local-storage';\nimport React, { useCallback, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { CurrentUserDocument, useSignUpMutation } from '../../../generate/types';\nimport { SignupForm } from '../component/SignupForm';\nimport { useApolloClient } from '@apollo/react-hooks';\n\nexport type SignupInput = {\n  fullName: string;\n  email: string;\n  phone: string;\n  password: string;\n};\n\nexport type SignupInitValue = {\n  fullName: string;\n  email: string;\n  phone: string;\n  password: string;\n  confirmPassword: string;\n};\n\nconst Signup = () => {\n  const client = useApolloClient();\n  const { push } = useHistory();\n  const [signUpFn, { loading }] = useSignUpMutation();\n  const [errorMessage, setAlertError] = useState<string | undefined>();\n\n  const closeError = useCallback(() => {\n    setAlertError(undefined);\n  }, [setAlertError]);\n\n  const signIn = useCallback(() => {\n    push(\"/login\");\n  }, [push])\n\n  const handleSignup = useCallback(\n    ({ email, fullName, password, phone }) => {\n      signUpFn({\n        variables: {\n          email,\n          password,\n          fullName,\n          phone,\n        },\n        update(cache, { data }) {\n          cache.writeQuery({\n            query: CurrentUserDocument,\n            data: { currentUser: data?.signUp },\n          });\n        },\n      })\n        .then((data) => {\n          client.resetStore();\n          set('userToken', data?.data?.signUp?.token);\n        })\n        .then(() => {\n          push('/');\n        })\n        .catch((error: ApolloError) => {\n          setAlertError(\n            error?.graphQLErrors.map(({ message }) => message).join(', '),\n          );\n        });\n    },\n    [signUpFn],\n  );\n\n  return (\n    <SignupForm\n      loading={loading}\n      onSignup={handleSignup}\n      closeError={closeError}\n      errorMessage={errorMessage}\n      signIn={signIn}\n    />\n  );\n};\n\nexport default Signup;\n","import React from 'react'\nimport Signup from '../domain/user/container/Signup'\nimport ContainerPage from '../containers/ContainerPage';\n\nconst SignupPage = () => (\n  <ContainerPage>\n    <Signup />\n  </ContainerPage>\n);\n\nexport default SignupPage","import { Snackbar } from \"@material-ui/core\";\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\nimport React from \"react\";\n\ntype Props = {\n  message?: string;\n  open?: boolean;\n  severity?:string;\n} & AlertProps;\n\nconst Alert = ({ severity='error', message, open, ...rest }: Props) => {\n  return (\n    <>\n      <Snackbar open={open} autoHideDuration={6000}>\n        <MuiAlert elevation={6} variant=\"filled\" severity={severity} {...rest}>\n          {message}\n        </MuiAlert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default Alert;\n","import Button, { ButtonProps } from '@material-ui/core/Button';\nimport React from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport customTheme from '../theme';\nimport { CircularProgress } from '@material-ui/core';\n\ntype Props = {\n  loading?: boolean;\n} & ButtonProps;\n\nexport const PrimaryButton = ({loading, children, ...rest}: Props) => {\n    const classes = useStyles();\n\n    return <Button className={classes.button} size=\"small\" fullWidth variant=\"contained\" color='primary'   {...rest} >\n      { loading && <CircularProgress className={classes.loading} size={20} /> }\n      { !loading && children }\n    </Button>\n}\n\nconst useStyles = makeStyles({\n    button: {\n        margin: `${customTheme.spacing.margin.small} auto`,\n        padding: customTheme.spacing.margin.smaller\n    },\n    loading: {\n      color: customTheme.color.white,\n    }\n});\n\n","import { makeStyles } from '@material-ui/styles';\nimport { ErrorMessage } from 'formik';\nimport React from 'react';\nimport customTheme from '../theme';\n\ninterface Props {\n    name: string;\n}\n\nexport const ErrorFieldForm = ({ name }: Props) => {\n    const classes = useStyles()\n    return <ErrorMessage className={classes.error} name={name} component=\"div\" />\n}\n\nconst useStyles = makeStyles({\n    error: {\n        color: customTheme.color.primaryDark,\n        alignSelf: 'flex-start',\n        fontSize: customTheme.font.size.small\n    },\n});\n\n"],"sourceRoot":""}