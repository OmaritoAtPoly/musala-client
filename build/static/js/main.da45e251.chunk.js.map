{"version":3,"sources":["apolloClient.ts","routes/Routes.tsx","App.tsx","serviceWorker.ts","index.tsx","theme.ts","generate/types.ts","routes/routesDefinition.ts","utils/constants.ts","component/PageLayout.tsx","utils/auth.ts","component/svg/Brand.tsx","component/Header/NavLink.tsx","component/Header/Header.tsx","component/Header/index.tsx","containers/Header.tsx","containers/ContainerPage.tsx","component/Header/FakeNavLink.tsx"],"names":["fragmentMatcher","IntrospectionFragmentMatcher","introspectionQueryResultData","IntrospectionResultData","client","ApolloClient","request","operation","a","get","token","setContext","headers","authorization","cache","InMemoryCache","uri","process","useStyles","makeStyles","center","position","top","left","Routes","classes","fallback","CircularProgress","className","size","routes","map","props","i","key","render","ContainerPage","Typography","variant","gutterBottom","NOT_FOUND","App","ThemeProvider","theme","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","customTheme","font","small","medium","border","dimension","radius","bold","height","day_calendar_height","width","day_calendar_width","wLayout","w50","w90","w100","spacing","margin","none","mini","smaller1","smaller","big","bigger","m5","m10","m50","padding","color","primary","foreground","background","primaryAccent","lighten","primaryShade1","primaryShade2","primaryShade3","primaryShade4","primaryDark","darken","secondary","white","black","grayLight1","grayLight2","grayLight3","grayLight4","grayDark1","grayDark2","grayDark3","grayDark4","palette","main","contrastText","text","default","paper","title","fontFamily","fontWeight","createMuiTheme","shape","borderRadius","overrides","MuiButton","root","outlinedPrimary","backgroundColor","typography","join","h1","fontSize","lineHeight","h2","h3","h4","h5","button","textTransform","body1","body2","AdOrderByInput","OpsEnum","UpdateAvailabilityDocument","gql","useUpdateAvailabilityMutation","baseOptions","ApolloReactHooks","CreateBookingDocument","useCreateBookingMutation","ListAdsDocument","useListAdsQuery","SelectAdByIdDocument","useSelectAdByIdQuery","CurrentAvailabilityDocument","useCurrentAvailabilityQuery","SignUpDocument","useSignUpMutation","SignInDocument","useSignInMutation","CurrentUserDocument","useCurrentUserQuery","CurrentUserBookingsDocument","useCurrentUserBookingsQuery","result","routesDefinition","exact","path","component","lazy","needLoggedIn","phoneRegExp","NAME_REQUIRED","EMAIL_REQUIRED","EMAIL_INCORRECT","PHONE_REQUIRED","INVALID_PHONE","PASSWORD_REQUIRED","CONFIRM_PASSWORD_REQUIRED","MATCH_PASSWORD","emailRegExp","PER_NIGHT","REQUIRED_RANGE","BOOK_NOW","SUBMIT","CREATE_AT","RESERVED_AT","REGISTERED","CLICK_ME","MOST_POPULAR_SUBTITLE","MOST_POPULAR","THE_CHEAPEST","THE_CHEAPEST_SUBTITLE","BLOCKED","AVAILABLE","UNDEFINED","AVAILABILITY","ACTION_VALIDATE","PAX_VALIDATE","INFO_SEVERITY_VALUE","ERROR_SEVERITY_VALUE","DATE_FORMAT","WEEK_DAYS","styled","maxWidth","marginRight","marginLeft","breakpoints","down","loggedIn","BrandContainer","display","alignItems","justifyContent","paddingRight","icon","Brand","SvgIcon","d","navLink","paddingLeft","Link","Button","innerRef","innerProps","appBar","boxShadow","toolbar","Header","links","userName","AppBar","Toolbar","NavLink","to","onClick","FakeNavLink","useApolloClient","data","fetchPolicy","errorPolicy","isHost","useMemo","currentUser","role","push","useHistory","auth","remove","resetStore","fullName","children","pathname","currentRoute","find","PageLayout"],"mappings":"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","file":"static/js/main.da45e251.chunk.js","sourcesContent":["import ApolloClient, { InMemoryCache, IntrospectionFragmentMatcher } from \"apollo-boost/lib/index\";\nimport { get } from \"local-storage\";\nimport IntrospectionResultData from \"./generate/types\";\n\nconst endpoint = process.env.REACT_APP_API_ENDPOINT\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData: IntrospectionResultData as any,\n});\n\nconst client = new ApolloClient({\n  request: async (operation: any) => {\n    const token = await get(\"userToken\");\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\"\n      }\n    });\n  },\n  cache: new InMemoryCache({\n    fragmentMatcher,\n  }),\n  uri: endpoint\n});\n\nexport default client;","import React, { Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport routes from './routesDefinition';\nimport { CircularProgress, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport { NOT_FOUND } from '../utils/constants';\nimport ContainerPage from '../containers/ContainerPage';\n\nconst Routes = () => {\n  const classes = useStyles();\n  return (\n    <Suspense\n      fallback={<CircularProgress className={classes.center} size={20} />}\n    >\n      <Switch>\n        {routes.map((props, i) => (\n          <Route {...props} key={i} />\n        ))}\n        <Route\n          render={() => (\n            <ContainerPage>\n              <Typography variant=\"h5\" gutterBottom className={classes.center}>\n                {NOT_FOUND}\n              </Typography>\n            </ContainerPage>\n          )}\n        />\n      </Switch>\n    </Suspense>\n  );\n};\n\nconst useStyles = makeStyles({\n  center: {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n  },\n});\n\nexport default Routes;\n","import { ApolloProvider } from \"@apollo/react-hooks\";\nimport { ThemeProvider } from '@material-ui/styles';\nimport React from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport client from './apolloClient';\nimport Routes from './routes/Routes';\nimport { theme } from './theme';\n      \nconst App = () => (\n  <ApolloProvider client={client}>\n    <ThemeProvider theme={theme} >\n      <BrowserRouter>\n        <Routes />\n      </BrowserRouter>\n    </ThemeProvider>\n  </ApolloProvider>\n);\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport { darken, lighten } from 'polished';\nimport { PaletteOptions } from '@material-ui/core/styles/createPalette';\n\nconst primary = '#da1921';\n\nexport const customTheme = {\n  font: {\n    size: {\n      small: '.8rem',\n      medium: '1rem'\n    }\n  },\n  border:{\n     small:\"1px\"\n  },\n  dimension: {\n    radius: {\n      small: '0.3rem'\n    },\n    font: {\n      bold: 800\n    },\n    height: {\n      small: '1rem',\n      medium: '13rem',\n      day_calendar_height: '2.5rem'\n    },\n    width: {\n      small: '1rem',\n      day_calendar_width: '2.5rem',\n      wLayout:\"1400px\",\n      w50: '50%',\n      w90: '90%',\n      w100: '100%', \n    },\n  },\n  spacing: {\n    margin: {\n      none: 0,\n      mini: '.1rem',\n      smaller1: '.2rem',\n      smaller: '.5rem',\n      small: '1rem',\n      medium: '1.5rem',\n      big: '2rem',\n      bigger: '4rem',\n      m5: '5%',\n      m10: '10%',\n      m50: '50%'\n    },\n    padding: {\n      none: 0,\n      smaller: '.5rem',\n      small: '1rem',\n      medium: '1.5rem',\n      big: '2rem',\n    },\n  },\n  color: {\n    primary,\n    foreground: '#707070',\n    background: '#ffffff',\n    primaryAccent: lighten(0.1, primary),\n    primaryShade1: lighten(0.2, primary),\n    primaryShade2: lighten(0.27, primary),\n    primaryShade3: lighten(0.37, primary),\n    primaryShade4: lighten(0.43, primary),\n    primaryDark: darken(0.1, primary),\n    secondary: darken(0.14, primary),\n    white: '#ffffff',\n    black: '#000000',\n    grayLight1: '#f2f2f2',\n    grayLight2: '#dfdfdf',\n    grayLight3: '#707070',\n    grayLight4: '#ccc',\n    grayDark1: '#f4f2f2',\n    grayDark2: '#f0eeee',\n    grayDark3: '#ccc',\n    grayDark4: '#bbb',\n  },\n};\n\nexport default customTheme;\n\nconst palette: PaletteOptions = {\n  primary: { main: '#da1921', contrastText: '#FAFAFA' },\n  secondary: { main: '#FFCCBC', contrastText: '#757575' },\n  text: { primary: '#707070' },\n  background: {\n    default: '#FFFFFF',\n    paper: '#FFFFFF',\n  },\n};\n\nconst title = {\n  fontFamily: 'Lato',\n  fontWeight: 500,\n};\n\nexport const theme = createMuiTheme({\n  palette: palette,\n  shape: {\n    borderRadius: 0,\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        borderRadius: 5,\n      },\n      outlinedPrimary: {\n        '&:hover': {\n          backgroundColor: primary,\n          color: palette.background!!.paper,\n        },\n      },\n    },\n  },\n  typography: {\n    fontFamily: [\n      'Lato',\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      'Oxygen',\n      'Ubuntu',\n      '\"Fira Sans\"',\n      '\"Droid Sans\"',\n      '\"Helvetica Neue\"',\n      'sans-serif',\n      'Apple Color Emoji',\n      'Segoe UI Emoji',\n      'Segoe UI Symbol',\n      'Noto Color Emoji',\n    ].join(','),\n    h1: {\n      ...title,\n      fontSize: '2.5rem',\n      lineHeight: 1.2,\n    },\n    h2: {\n      ...title,\n      fontSize: '2.5rem',\n      lineHeight: 1.2,\n    },\n    h3: {\n      ...title,\n      fontSize: '1.5rem',\n      lineHeight: 1,\n    },\n    h4: {\n      ...title,\n      fontSize: '1.25rem',\n      lineHeight: 1,\n    },\n    h5: {\n      ...title,\n      fontSize: '1rem',\n      lineHeight: 1,\n    },\n    button: {\n      fontSize: '1rem',\n      textTransform: 'unset',\n    },\n    body1: {\n      fontFamily: 'Lato',\n      fontWeight: 300,\n    },\n    body2: {\n      fontFamily: 'Lato',\n      fontSize: '1rem',\n      fontWeight: 400,\n    },\n  },\n});\n","import gql from 'graphql-tag';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  currentUser?: Maybe<User>;\n  ads: Array<Maybe<Ad>>;\n  ad?: Maybe<Ad>;\n};\n\n\nexport type QueryAdsArgs = {\n  where?: Maybe<AdWhereInput>;\n  orderBy?: Maybe<AdOrderByInput>;\n  skip?: Maybe<Scalars['Int']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdArgs = {\n  where: AdWhereUniqueInput;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  email: Scalars['String'];\n  fullName: Scalars['String'];\n  password: Scalars['String'];\n  phone: Scalars['String'];\n  role: Scalars['String'];\n  bookings: Array<Booking>;\n  ad?: Maybe<Ad>;\n  token?: Maybe<Scalars['String']>;\n  createdAt: Scalars['DateTime'];\n};\n\nexport type Booking = {\n  __typename?: 'Booking';\n  id: Scalars['ID'];\n  checkin: Scalars['DateTime'];\n  checkout: Scalars['DateTime'];\n  totalPaid: Scalars['Float'];\n  pax: Scalars['Int'];\n  client: User;\n  ad: Ad;\n  createdAt: Scalars['DateTime'];\n};\n\n\nexport type Ad = {\n  __typename?: 'Ad';\n  id: Scalars['ID'];\n  title: Scalars['String'];\n  description: Scalars['String'];\n  image: Scalars['String'];\n  price: Scalars['Int'];\n  ranking: Scalars['Float'];\n  host: User;\n  bookings: Array<Booking>;\n  blockedDays: Array<BlockedDay>;\n  createdAt: Scalars['DateTime'];\n};\n\nexport type BlockedDay = {\n  __typename?: 'BlockedDay';\n  id: Scalars['ID'];\n  checkin: Scalars['DateTime'];\n  checkout: Scalars['DateTime'];\n  byBooking?: Maybe<Scalars['Boolean']>;\n  ad: Ad;\n};\n\nexport type AdWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  title?: Maybe<Scalars['String']>;\n  title_not?: Maybe<Scalars['String']>;\n  title_in?: Maybe<Array<Scalars['String']>>;\n  title_not_in?: Maybe<Array<Scalars['String']>>;\n  title_lt?: Maybe<Scalars['String']>;\n  title_lte?: Maybe<Scalars['String']>;\n  title_gt?: Maybe<Scalars['String']>;\n  title_gte?: Maybe<Scalars['String']>;\n  title_contains?: Maybe<Scalars['String']>;\n  title_not_contains?: Maybe<Scalars['String']>;\n  title_starts_with?: Maybe<Scalars['String']>;\n  title_not_starts_with?: Maybe<Scalars['String']>;\n  title_ends_with?: Maybe<Scalars['String']>;\n  title_not_ends_with?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  description_not?: Maybe<Scalars['String']>;\n  description_in?: Maybe<Array<Scalars['String']>>;\n  description_not_in?: Maybe<Array<Scalars['String']>>;\n  description_lt?: Maybe<Scalars['String']>;\n  description_lte?: Maybe<Scalars['String']>;\n  description_gt?: Maybe<Scalars['String']>;\n  description_gte?: Maybe<Scalars['String']>;\n  description_contains?: Maybe<Scalars['String']>;\n  description_not_contains?: Maybe<Scalars['String']>;\n  description_starts_with?: Maybe<Scalars['String']>;\n  description_not_starts_with?: Maybe<Scalars['String']>;\n  description_ends_with?: Maybe<Scalars['String']>;\n  description_not_ends_with?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  image_not?: Maybe<Scalars['String']>;\n  image_in?: Maybe<Array<Scalars['String']>>;\n  image_not_in?: Maybe<Array<Scalars['String']>>;\n  image_lt?: Maybe<Scalars['String']>;\n  image_lte?: Maybe<Scalars['String']>;\n  image_gt?: Maybe<Scalars['String']>;\n  image_gte?: Maybe<Scalars['String']>;\n  image_contains?: Maybe<Scalars['String']>;\n  image_not_contains?: Maybe<Scalars['String']>;\n  image_starts_with?: Maybe<Scalars['String']>;\n  image_not_starts_with?: Maybe<Scalars['String']>;\n  image_ends_with?: Maybe<Scalars['String']>;\n  image_not_ends_with?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['Int']>;\n  price_not?: Maybe<Scalars['Int']>;\n  price_in?: Maybe<Array<Scalars['Int']>>;\n  price_not_in?: Maybe<Array<Scalars['Int']>>;\n  price_lt?: Maybe<Scalars['Int']>;\n  price_lte?: Maybe<Scalars['Int']>;\n  price_gt?: Maybe<Scalars['Int']>;\n  price_gte?: Maybe<Scalars['Int']>;\n  ranking?: Maybe<Scalars['Float']>;\n  ranking_not?: Maybe<Scalars['Float']>;\n  ranking_in?: Maybe<Array<Scalars['Float']>>;\n  ranking_not_in?: Maybe<Array<Scalars['Float']>>;\n  ranking_lt?: Maybe<Scalars['Float']>;\n  ranking_lte?: Maybe<Scalars['Float']>;\n  ranking_gt?: Maybe<Scalars['Float']>;\n  ranking_gte?: Maybe<Scalars['Float']>;\n  host?: Maybe<UserWhereInput>;\n  bookings_every?: Maybe<BookingWhereInput>;\n  bookings_some?: Maybe<BookingWhereInput>;\n  bookings_none?: Maybe<BookingWhereInput>;\n  blockedDays_every?: Maybe<BlockedDayWhereInput>;\n  blockedDays_some?: Maybe<BlockedDayWhereInput>;\n  blockedDays_none?: Maybe<BlockedDayWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<AdWhereInput>>;\n  OR?: Maybe<Array<AdWhereInput>>;\n  NOT?: Maybe<Array<AdWhereInput>>;\n};\n\nexport type UserWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  email?: Maybe<Scalars['String']>;\n  email_not?: Maybe<Scalars['String']>;\n  email_in?: Maybe<Array<Scalars['String']>>;\n  email_not_in?: Maybe<Array<Scalars['String']>>;\n  email_lt?: Maybe<Scalars['String']>;\n  email_lte?: Maybe<Scalars['String']>;\n  email_gt?: Maybe<Scalars['String']>;\n  email_gte?: Maybe<Scalars['String']>;\n  email_contains?: Maybe<Scalars['String']>;\n  email_not_contains?: Maybe<Scalars['String']>;\n  email_starts_with?: Maybe<Scalars['String']>;\n  email_not_starts_with?: Maybe<Scalars['String']>;\n  email_ends_with?: Maybe<Scalars['String']>;\n  email_not_ends_with?: Maybe<Scalars['String']>;\n  fullName?: Maybe<Scalars['String']>;\n  fullName_not?: Maybe<Scalars['String']>;\n  fullName_in?: Maybe<Array<Scalars['String']>>;\n  fullName_not_in?: Maybe<Array<Scalars['String']>>;\n  fullName_lt?: Maybe<Scalars['String']>;\n  fullName_lte?: Maybe<Scalars['String']>;\n  fullName_gt?: Maybe<Scalars['String']>;\n  fullName_gte?: Maybe<Scalars['String']>;\n  fullName_contains?: Maybe<Scalars['String']>;\n  fullName_not_contains?: Maybe<Scalars['String']>;\n  fullName_starts_with?: Maybe<Scalars['String']>;\n  fullName_not_starts_with?: Maybe<Scalars['String']>;\n  fullName_ends_with?: Maybe<Scalars['String']>;\n  fullName_not_ends_with?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  password_not?: Maybe<Scalars['String']>;\n  password_in?: Maybe<Array<Scalars['String']>>;\n  password_not_in?: Maybe<Array<Scalars['String']>>;\n  password_lt?: Maybe<Scalars['String']>;\n  password_lte?: Maybe<Scalars['String']>;\n  password_gt?: Maybe<Scalars['String']>;\n  password_gte?: Maybe<Scalars['String']>;\n  password_contains?: Maybe<Scalars['String']>;\n  password_not_contains?: Maybe<Scalars['String']>;\n  password_starts_with?: Maybe<Scalars['String']>;\n  password_not_starts_with?: Maybe<Scalars['String']>;\n  password_ends_with?: Maybe<Scalars['String']>;\n  password_not_ends_with?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  phone_not?: Maybe<Scalars['String']>;\n  phone_in?: Maybe<Array<Scalars['String']>>;\n  phone_not_in?: Maybe<Array<Scalars['String']>>;\n  phone_lt?: Maybe<Scalars['String']>;\n  phone_lte?: Maybe<Scalars['String']>;\n  phone_gt?: Maybe<Scalars['String']>;\n  phone_gte?: Maybe<Scalars['String']>;\n  phone_contains?: Maybe<Scalars['String']>;\n  phone_not_contains?: Maybe<Scalars['String']>;\n  phone_starts_with?: Maybe<Scalars['String']>;\n  phone_not_starts_with?: Maybe<Scalars['String']>;\n  phone_ends_with?: Maybe<Scalars['String']>;\n  phone_not_ends_with?: Maybe<Scalars['String']>;\n  role?: Maybe<Scalars['String']>;\n  role_not?: Maybe<Scalars['String']>;\n  role_in?: Maybe<Array<Scalars['String']>>;\n  role_not_in?: Maybe<Array<Scalars['String']>>;\n  role_lt?: Maybe<Scalars['String']>;\n  role_lte?: Maybe<Scalars['String']>;\n  role_gt?: Maybe<Scalars['String']>;\n  role_gte?: Maybe<Scalars['String']>;\n  role_contains?: Maybe<Scalars['String']>;\n  role_not_contains?: Maybe<Scalars['String']>;\n  role_starts_with?: Maybe<Scalars['String']>;\n  role_not_starts_with?: Maybe<Scalars['String']>;\n  role_ends_with?: Maybe<Scalars['String']>;\n  role_not_ends_with?: Maybe<Scalars['String']>;\n  bookings_every?: Maybe<BookingWhereInput>;\n  bookings_some?: Maybe<BookingWhereInput>;\n  bookings_none?: Maybe<BookingWhereInput>;\n  ad?: Maybe<AdWhereInput>;\n  token?: Maybe<Scalars['String']>;\n  token_not?: Maybe<Scalars['String']>;\n  token_in?: Maybe<Array<Scalars['String']>>;\n  token_not_in?: Maybe<Array<Scalars['String']>>;\n  token_lt?: Maybe<Scalars['String']>;\n  token_lte?: Maybe<Scalars['String']>;\n  token_gt?: Maybe<Scalars['String']>;\n  token_gte?: Maybe<Scalars['String']>;\n  token_contains?: Maybe<Scalars['String']>;\n  token_not_contains?: Maybe<Scalars['String']>;\n  token_starts_with?: Maybe<Scalars['String']>;\n  token_not_starts_with?: Maybe<Scalars['String']>;\n  token_ends_with?: Maybe<Scalars['String']>;\n  token_not_ends_with?: Maybe<Scalars['String']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<UserWhereInput>>;\n  OR?: Maybe<Array<UserWhereInput>>;\n  NOT?: Maybe<Array<UserWhereInput>>;\n};\n\nexport type BookingWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  checkin?: Maybe<Scalars['DateTime']>;\n  checkin_not?: Maybe<Scalars['DateTime']>;\n  checkin_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkin_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkin_lt?: Maybe<Scalars['DateTime']>;\n  checkin_lte?: Maybe<Scalars['DateTime']>;\n  checkin_gt?: Maybe<Scalars['DateTime']>;\n  checkin_gte?: Maybe<Scalars['DateTime']>;\n  checkout?: Maybe<Scalars['DateTime']>;\n  checkout_not?: Maybe<Scalars['DateTime']>;\n  checkout_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkout_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkout_lt?: Maybe<Scalars['DateTime']>;\n  checkout_lte?: Maybe<Scalars['DateTime']>;\n  checkout_gt?: Maybe<Scalars['DateTime']>;\n  checkout_gte?: Maybe<Scalars['DateTime']>;\n  totalPaid?: Maybe<Scalars['Float']>;\n  totalPaid_not?: Maybe<Scalars['Float']>;\n  totalPaid_in?: Maybe<Array<Scalars['Float']>>;\n  totalPaid_not_in?: Maybe<Array<Scalars['Float']>>;\n  totalPaid_lt?: Maybe<Scalars['Float']>;\n  totalPaid_lte?: Maybe<Scalars['Float']>;\n  totalPaid_gt?: Maybe<Scalars['Float']>;\n  totalPaid_gte?: Maybe<Scalars['Float']>;\n  pax?: Maybe<Scalars['Int']>;\n  pax_not?: Maybe<Scalars['Int']>;\n  pax_in?: Maybe<Array<Scalars['Int']>>;\n  pax_not_in?: Maybe<Array<Scalars['Int']>>;\n  pax_lt?: Maybe<Scalars['Int']>;\n  pax_lte?: Maybe<Scalars['Int']>;\n  pax_gt?: Maybe<Scalars['Int']>;\n  pax_gte?: Maybe<Scalars['Int']>;\n  client?: Maybe<UserWhereInput>;\n  ad?: Maybe<AdWhereInput>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<BookingWhereInput>>;\n  OR?: Maybe<Array<BookingWhereInput>>;\n  NOT?: Maybe<Array<BookingWhereInput>>;\n};\n\nexport type BlockedDayWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  checkin?: Maybe<Scalars['DateTime']>;\n  checkin_not?: Maybe<Scalars['DateTime']>;\n  checkin_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkin_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkin_lt?: Maybe<Scalars['DateTime']>;\n  checkin_lte?: Maybe<Scalars['DateTime']>;\n  checkin_gt?: Maybe<Scalars['DateTime']>;\n  checkin_gte?: Maybe<Scalars['DateTime']>;\n  checkout?: Maybe<Scalars['DateTime']>;\n  checkout_not?: Maybe<Scalars['DateTime']>;\n  checkout_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkout_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkout_lt?: Maybe<Scalars['DateTime']>;\n  checkout_lte?: Maybe<Scalars['DateTime']>;\n  checkout_gt?: Maybe<Scalars['DateTime']>;\n  checkout_gte?: Maybe<Scalars['DateTime']>;\n  byBooking?: Maybe<Scalars['Boolean']>;\n  byBooking_not?: Maybe<Scalars['Boolean']>;\n  ad?: Maybe<AdWhereInput>;\n  AND?: Maybe<Array<BlockedDayWhereInput>>;\n  OR?: Maybe<Array<BlockedDayWhereInput>>;\n  NOT?: Maybe<Array<BlockedDayWhereInput>>;\n};\n\nexport enum AdOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  TitleAsc = 'title_ASC',\n  TitleDesc = 'title_DESC',\n  DescriptionAsc = 'description_ASC',\n  DescriptionDesc = 'description_DESC',\n  ImageAsc = 'image_ASC',\n  ImageDesc = 'image_DESC',\n  PriceAsc = 'price_ASC',\n  PriceDesc = 'price_DESC',\n  RankingAsc = 'ranking_ASC',\n  RankingDesc = 'ranking_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC'\n}\n\nexport type AdWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  signIn?: Maybe<User>;\n  signUp?: Maybe<User>;\n  createBooking: Booking;\n  updateBlockedDay?: Maybe<BlockedDay>;\n  deleteBlockedDay?: Maybe<BlockedDay>;\n  updateAvailability: Scalars['Boolean'];\n};\n\n\nexport type MutationSignInArgs = {\n  data: SignInInput;\n};\n\n\nexport type MutationSignUpArgs = {\n  data: SignUpInput;\n};\n\n\nexport type MutationCreateBookingArgs = {\n  data: BookingInput;\n};\n\n\nexport type MutationUpdateBlockedDayArgs = {\n  data: BlockedDayUpdateInput;\n  where: BlockedDayWhereUniqueInput;\n};\n\n\nexport type MutationDeleteBlockedDayArgs = {\n  where: BlockedDayWhereUniqueInput;\n};\n\n\nexport type MutationUpdateAvailabilityArgs = {\n  data: UpdateAvailableInput;\n};\n\nexport type SignInInput = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SignUpInput = {\n  email: Scalars['String'];\n  fullName: Scalars['String'];\n  password: Scalars['String'];\n  phone: Scalars['String'];\n};\n\nexport type BookingInput = {\n  checkin: Scalars['DateTime'];\n  checkout: Scalars['DateTime'];\n  clientId: Scalars['String'];\n  pax: Scalars['Int'];\n  adId: Scalars['String'];\n};\n\nexport type BlockedDayUpdateInput = {\n  checkin?: Maybe<Scalars['DateTime']>;\n  checkout?: Maybe<Scalars['DateTime']>;\n  byBooking?: Maybe<Scalars['Boolean']>;\n  ad?: Maybe<AdUpdateOneRequiredWithoutBlockedDaysInput>;\n};\n\nexport type AdUpdateOneRequiredWithoutBlockedDaysInput = {\n  create?: Maybe<AdCreateWithoutBlockedDaysInput>;\n  update?: Maybe<AdUpdateWithoutBlockedDaysDataInput>;\n  upsert?: Maybe<AdUpsertWithoutBlockedDaysInput>;\n  connect?: Maybe<AdWhereUniqueInput>;\n};\n\nexport type AdCreateWithoutBlockedDaysInput = {\n  id?: Maybe<Scalars['ID']>;\n  title: Scalars['String'];\n  description: Scalars['String'];\n  image: Scalars['String'];\n  price: Scalars['Int'];\n  ranking: Scalars['Float'];\n  host: UserCreateOneWithoutAdInput;\n  bookings?: Maybe<BookingCreateManyWithoutAdInput>;\n};\n\nexport type UserCreateOneWithoutAdInput = {\n  create?: Maybe<UserCreateWithoutAdInput>;\n  connect?: Maybe<UserWhereUniqueInput>;\n};\n\nexport type UserCreateWithoutAdInput = {\n  id?: Maybe<Scalars['ID']>;\n  email: Scalars['String'];\n  fullName: Scalars['String'];\n  password: Scalars['String'];\n  phone: Scalars['String'];\n  role: Scalars['String'];\n  bookings?: Maybe<BookingCreateManyWithoutClientInput>;\n  token?: Maybe<Scalars['String']>;\n};\n\nexport type BookingCreateManyWithoutClientInput = {\n  create?: Maybe<Array<BookingCreateWithoutClientInput>>;\n  connect?: Maybe<Array<BookingWhereUniqueInput>>;\n};\n\nexport type BookingCreateWithoutClientInput = {\n  id?: Maybe<Scalars['ID']>;\n  checkin: Scalars['DateTime'];\n  checkout: Scalars['DateTime'];\n  totalPaid: Scalars['Float'];\n  pax: Scalars['Int'];\n  ad: AdCreateOneWithoutBookingsInput;\n};\n\nexport type AdCreateOneWithoutBookingsInput = {\n  create?: Maybe<AdCreateWithoutBookingsInput>;\n  connect?: Maybe<AdWhereUniqueInput>;\n};\n\nexport type AdCreateWithoutBookingsInput = {\n  id?: Maybe<Scalars['ID']>;\n  title: Scalars['String'];\n  description: Scalars['String'];\n  image: Scalars['String'];\n  price: Scalars['Int'];\n  ranking: Scalars['Float'];\n  host: UserCreateOneWithoutAdInput;\n  blockedDays?: Maybe<BlockedDayCreateManyWithoutAdInput>;\n};\n\nexport type BlockedDayCreateManyWithoutAdInput = {\n  create?: Maybe<Array<BlockedDayCreateWithoutAdInput>>;\n  connect?: Maybe<Array<BlockedDayWhereUniqueInput>>;\n};\n\nexport type BlockedDayCreateWithoutAdInput = {\n  id?: Maybe<Scalars['ID']>;\n  checkin: Scalars['DateTime'];\n  checkout: Scalars['DateTime'];\n  byBooking?: Maybe<Scalars['Boolean']>;\n};\n\nexport type BlockedDayWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type BookingWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type UserWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>;\n  email?: Maybe<Scalars['String']>;\n};\n\nexport type BookingCreateManyWithoutAdInput = {\n  create?: Maybe<Array<BookingCreateWithoutAdInput>>;\n  connect?: Maybe<Array<BookingWhereUniqueInput>>;\n};\n\nexport type BookingCreateWithoutAdInput = {\n  id?: Maybe<Scalars['ID']>;\n  checkin: Scalars['DateTime'];\n  checkout: Scalars['DateTime'];\n  totalPaid: Scalars['Float'];\n  pax: Scalars['Int'];\n  client: UserCreateOneWithoutBookingsInput;\n};\n\nexport type UserCreateOneWithoutBookingsInput = {\n  create?: Maybe<UserCreateWithoutBookingsInput>;\n  connect?: Maybe<UserWhereUniqueInput>;\n};\n\nexport type UserCreateWithoutBookingsInput = {\n  id?: Maybe<Scalars['ID']>;\n  email: Scalars['String'];\n  fullName: Scalars['String'];\n  password: Scalars['String'];\n  phone: Scalars['String'];\n  role: Scalars['String'];\n  ad?: Maybe<AdCreateOneWithoutHostInput>;\n  token?: Maybe<Scalars['String']>;\n};\n\nexport type AdCreateOneWithoutHostInput = {\n  create?: Maybe<AdCreateWithoutHostInput>;\n  connect?: Maybe<AdWhereUniqueInput>;\n};\n\nexport type AdCreateWithoutHostInput = {\n  id?: Maybe<Scalars['ID']>;\n  title: Scalars['String'];\n  description: Scalars['String'];\n  image: Scalars['String'];\n  price: Scalars['Int'];\n  ranking: Scalars['Float'];\n  bookings?: Maybe<BookingCreateManyWithoutAdInput>;\n  blockedDays?: Maybe<BlockedDayCreateManyWithoutAdInput>;\n};\n\nexport type AdUpdateWithoutBlockedDaysDataInput = {\n  title?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['Int']>;\n  ranking?: Maybe<Scalars['Float']>;\n  host?: Maybe<UserUpdateOneRequiredWithoutAdInput>;\n  bookings?: Maybe<BookingUpdateManyWithoutAdInput>;\n};\n\nexport type UserUpdateOneRequiredWithoutAdInput = {\n  create?: Maybe<UserCreateWithoutAdInput>;\n  update?: Maybe<UserUpdateWithoutAdDataInput>;\n  upsert?: Maybe<UserUpsertWithoutAdInput>;\n  connect?: Maybe<UserWhereUniqueInput>;\n};\n\nexport type UserUpdateWithoutAdDataInput = {\n  email?: Maybe<Scalars['String']>;\n  fullName?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  role?: Maybe<Scalars['String']>;\n  bookings?: Maybe<BookingUpdateManyWithoutClientInput>;\n  token?: Maybe<Scalars['String']>;\n};\n\nexport type BookingUpdateManyWithoutClientInput = {\n  create?: Maybe<Array<BookingCreateWithoutClientInput>>;\n  delete?: Maybe<Array<BookingWhereUniqueInput>>;\n  connect?: Maybe<Array<BookingWhereUniqueInput>>;\n  set?: Maybe<Array<BookingWhereUniqueInput>>;\n  disconnect?: Maybe<Array<BookingWhereUniqueInput>>;\n  update?: Maybe<Array<BookingUpdateWithWhereUniqueWithoutClientInput>>;\n  upsert?: Maybe<Array<BookingUpsertWithWhereUniqueWithoutClientInput>>;\n  deleteMany?: Maybe<Array<BookingScalarWhereInput>>;\n  updateMany?: Maybe<Array<BookingUpdateManyWithWhereNestedInput>>;\n};\n\nexport type BookingUpdateWithWhereUniqueWithoutClientInput = {\n  where: BookingWhereUniqueInput;\n  data: BookingUpdateWithoutClientDataInput;\n};\n\nexport type BookingUpdateWithoutClientDataInput = {\n  checkin?: Maybe<Scalars['DateTime']>;\n  checkout?: Maybe<Scalars['DateTime']>;\n  totalPaid?: Maybe<Scalars['Float']>;\n  pax?: Maybe<Scalars['Int']>;\n  ad?: Maybe<AdUpdateOneRequiredWithoutBookingsInput>;\n};\n\nexport type AdUpdateOneRequiredWithoutBookingsInput = {\n  create?: Maybe<AdCreateWithoutBookingsInput>;\n  update?: Maybe<AdUpdateWithoutBookingsDataInput>;\n  upsert?: Maybe<AdUpsertWithoutBookingsInput>;\n  connect?: Maybe<AdWhereUniqueInput>;\n};\n\nexport type AdUpdateWithoutBookingsDataInput = {\n  title?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['Int']>;\n  ranking?: Maybe<Scalars['Float']>;\n  host?: Maybe<UserUpdateOneRequiredWithoutAdInput>;\n  blockedDays?: Maybe<BlockedDayUpdateManyWithoutAdInput>;\n};\n\nexport type BlockedDayUpdateManyWithoutAdInput = {\n  create?: Maybe<Array<BlockedDayCreateWithoutAdInput>>;\n  delete?: Maybe<Array<BlockedDayWhereUniqueInput>>;\n  connect?: Maybe<Array<BlockedDayWhereUniqueInput>>;\n  set?: Maybe<Array<BlockedDayWhereUniqueInput>>;\n  disconnect?: Maybe<Array<BlockedDayWhereUniqueInput>>;\n  update?: Maybe<Array<BlockedDayUpdateWithWhereUniqueWithoutAdInput>>;\n  upsert?: Maybe<Array<BlockedDayUpsertWithWhereUniqueWithoutAdInput>>;\n  deleteMany?: Maybe<Array<BlockedDayScalarWhereInput>>;\n  updateMany?: Maybe<Array<BlockedDayUpdateManyWithWhereNestedInput>>;\n};\n\nexport type BlockedDayUpdateWithWhereUniqueWithoutAdInput = {\n  where: BlockedDayWhereUniqueInput;\n  data: BlockedDayUpdateWithoutAdDataInput;\n};\n\nexport type BlockedDayUpdateWithoutAdDataInput = {\n  checkin?: Maybe<Scalars['DateTime']>;\n  checkout?: Maybe<Scalars['DateTime']>;\n  byBooking?: Maybe<Scalars['Boolean']>;\n};\n\nexport type BlockedDayUpsertWithWhereUniqueWithoutAdInput = {\n  where: BlockedDayWhereUniqueInput;\n  update: BlockedDayUpdateWithoutAdDataInput;\n  create: BlockedDayCreateWithoutAdInput;\n};\n\nexport type BlockedDayScalarWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  checkin?: Maybe<Scalars['DateTime']>;\n  checkin_not?: Maybe<Scalars['DateTime']>;\n  checkin_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkin_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkin_lt?: Maybe<Scalars['DateTime']>;\n  checkin_lte?: Maybe<Scalars['DateTime']>;\n  checkin_gt?: Maybe<Scalars['DateTime']>;\n  checkin_gte?: Maybe<Scalars['DateTime']>;\n  checkout?: Maybe<Scalars['DateTime']>;\n  checkout_not?: Maybe<Scalars['DateTime']>;\n  checkout_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkout_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkout_lt?: Maybe<Scalars['DateTime']>;\n  checkout_lte?: Maybe<Scalars['DateTime']>;\n  checkout_gt?: Maybe<Scalars['DateTime']>;\n  checkout_gte?: Maybe<Scalars['DateTime']>;\n  byBooking?: Maybe<Scalars['Boolean']>;\n  byBooking_not?: Maybe<Scalars['Boolean']>;\n  AND?: Maybe<Array<BlockedDayScalarWhereInput>>;\n  OR?: Maybe<Array<BlockedDayScalarWhereInput>>;\n  NOT?: Maybe<Array<BlockedDayScalarWhereInput>>;\n};\n\nexport type BlockedDayUpdateManyWithWhereNestedInput = {\n  where: BlockedDayScalarWhereInput;\n  data: BlockedDayUpdateManyDataInput;\n};\n\nexport type BlockedDayUpdateManyDataInput = {\n  checkin?: Maybe<Scalars['DateTime']>;\n  checkout?: Maybe<Scalars['DateTime']>;\n  byBooking?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdUpsertWithoutBookingsInput = {\n  update: AdUpdateWithoutBookingsDataInput;\n  create: AdCreateWithoutBookingsInput;\n};\n\nexport type BookingUpsertWithWhereUniqueWithoutClientInput = {\n  where: BookingWhereUniqueInput;\n  update: BookingUpdateWithoutClientDataInput;\n  create: BookingCreateWithoutClientInput;\n};\n\nexport type BookingScalarWhereInput = {\n  id?: Maybe<Scalars['ID']>;\n  id_not?: Maybe<Scalars['ID']>;\n  id_in?: Maybe<Array<Scalars['ID']>>;\n  id_not_in?: Maybe<Array<Scalars['ID']>>;\n  id_lt?: Maybe<Scalars['ID']>;\n  id_lte?: Maybe<Scalars['ID']>;\n  id_gt?: Maybe<Scalars['ID']>;\n  id_gte?: Maybe<Scalars['ID']>;\n  id_contains?: Maybe<Scalars['ID']>;\n  id_not_contains?: Maybe<Scalars['ID']>;\n  id_starts_with?: Maybe<Scalars['ID']>;\n  id_not_starts_with?: Maybe<Scalars['ID']>;\n  id_ends_with?: Maybe<Scalars['ID']>;\n  id_not_ends_with?: Maybe<Scalars['ID']>;\n  checkin?: Maybe<Scalars['DateTime']>;\n  checkin_not?: Maybe<Scalars['DateTime']>;\n  checkin_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkin_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkin_lt?: Maybe<Scalars['DateTime']>;\n  checkin_lte?: Maybe<Scalars['DateTime']>;\n  checkin_gt?: Maybe<Scalars['DateTime']>;\n  checkin_gte?: Maybe<Scalars['DateTime']>;\n  checkout?: Maybe<Scalars['DateTime']>;\n  checkout_not?: Maybe<Scalars['DateTime']>;\n  checkout_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkout_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  checkout_lt?: Maybe<Scalars['DateTime']>;\n  checkout_lte?: Maybe<Scalars['DateTime']>;\n  checkout_gt?: Maybe<Scalars['DateTime']>;\n  checkout_gte?: Maybe<Scalars['DateTime']>;\n  totalPaid?: Maybe<Scalars['Float']>;\n  totalPaid_not?: Maybe<Scalars['Float']>;\n  totalPaid_in?: Maybe<Array<Scalars['Float']>>;\n  totalPaid_not_in?: Maybe<Array<Scalars['Float']>>;\n  totalPaid_lt?: Maybe<Scalars['Float']>;\n  totalPaid_lte?: Maybe<Scalars['Float']>;\n  totalPaid_gt?: Maybe<Scalars['Float']>;\n  totalPaid_gte?: Maybe<Scalars['Float']>;\n  pax?: Maybe<Scalars['Int']>;\n  pax_not?: Maybe<Scalars['Int']>;\n  pax_in?: Maybe<Array<Scalars['Int']>>;\n  pax_not_in?: Maybe<Array<Scalars['Int']>>;\n  pax_lt?: Maybe<Scalars['Int']>;\n  pax_lte?: Maybe<Scalars['Int']>;\n  pax_gt?: Maybe<Scalars['Int']>;\n  pax_gte?: Maybe<Scalars['Int']>;\n  createdAt?: Maybe<Scalars['DateTime']>;\n  createdAt_not?: Maybe<Scalars['DateTime']>;\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;\n  createdAt_lt?: Maybe<Scalars['DateTime']>;\n  createdAt_lte?: Maybe<Scalars['DateTime']>;\n  createdAt_gt?: Maybe<Scalars['DateTime']>;\n  createdAt_gte?: Maybe<Scalars['DateTime']>;\n  AND?: Maybe<Array<BookingScalarWhereInput>>;\n  OR?: Maybe<Array<BookingScalarWhereInput>>;\n  NOT?: Maybe<Array<BookingScalarWhereInput>>;\n};\n\nexport type BookingUpdateManyWithWhereNestedInput = {\n  where: BookingScalarWhereInput;\n  data: BookingUpdateManyDataInput;\n};\n\nexport type BookingUpdateManyDataInput = {\n  checkin?: Maybe<Scalars['DateTime']>;\n  checkout?: Maybe<Scalars['DateTime']>;\n  totalPaid?: Maybe<Scalars['Float']>;\n  pax?: Maybe<Scalars['Int']>;\n};\n\nexport type UserUpsertWithoutAdInput = {\n  update: UserUpdateWithoutAdDataInput;\n  create: UserCreateWithoutAdInput;\n};\n\nexport type BookingUpdateManyWithoutAdInput = {\n  create?: Maybe<Array<BookingCreateWithoutAdInput>>;\n  delete?: Maybe<Array<BookingWhereUniqueInput>>;\n  connect?: Maybe<Array<BookingWhereUniqueInput>>;\n  set?: Maybe<Array<BookingWhereUniqueInput>>;\n  disconnect?: Maybe<Array<BookingWhereUniqueInput>>;\n  update?: Maybe<Array<BookingUpdateWithWhereUniqueWithoutAdInput>>;\n  upsert?: Maybe<Array<BookingUpsertWithWhereUniqueWithoutAdInput>>;\n  deleteMany?: Maybe<Array<BookingScalarWhereInput>>;\n  updateMany?: Maybe<Array<BookingUpdateManyWithWhereNestedInput>>;\n};\n\nexport type BookingUpdateWithWhereUniqueWithoutAdInput = {\n  where: BookingWhereUniqueInput;\n  data: BookingUpdateWithoutAdDataInput;\n};\n\nexport type BookingUpdateWithoutAdDataInput = {\n  checkin?: Maybe<Scalars['DateTime']>;\n  checkout?: Maybe<Scalars['DateTime']>;\n  totalPaid?: Maybe<Scalars['Float']>;\n  pax?: Maybe<Scalars['Int']>;\n  client?: Maybe<UserUpdateOneRequiredWithoutBookingsInput>;\n};\n\nexport type UserUpdateOneRequiredWithoutBookingsInput = {\n  create?: Maybe<UserCreateWithoutBookingsInput>;\n  update?: Maybe<UserUpdateWithoutBookingsDataInput>;\n  upsert?: Maybe<UserUpsertWithoutBookingsInput>;\n  connect?: Maybe<UserWhereUniqueInput>;\n};\n\nexport type UserUpdateWithoutBookingsDataInput = {\n  email?: Maybe<Scalars['String']>;\n  fullName?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  role?: Maybe<Scalars['String']>;\n  ad?: Maybe<AdUpdateOneWithoutHostInput>;\n  token?: Maybe<Scalars['String']>;\n};\n\nexport type AdUpdateOneWithoutHostInput = {\n  create?: Maybe<AdCreateWithoutHostInput>;\n  update?: Maybe<AdUpdateWithoutHostDataInput>;\n  upsert?: Maybe<AdUpsertWithoutHostInput>;\n  delete?: Maybe<Scalars['Boolean']>;\n  disconnect?: Maybe<Scalars['Boolean']>;\n  connect?: Maybe<AdWhereUniqueInput>;\n};\n\nexport type AdUpdateWithoutHostDataInput = {\n  title?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['Int']>;\n  ranking?: Maybe<Scalars['Float']>;\n  bookings?: Maybe<BookingUpdateManyWithoutAdInput>;\n  blockedDays?: Maybe<BlockedDayUpdateManyWithoutAdInput>;\n};\n\nexport type AdUpsertWithoutHostInput = {\n  update: AdUpdateWithoutHostDataInput;\n  create: AdCreateWithoutHostInput;\n};\n\nexport type UserUpsertWithoutBookingsInput = {\n  update: UserUpdateWithoutBookingsDataInput;\n  create: UserCreateWithoutBookingsInput;\n};\n\nexport type BookingUpsertWithWhereUniqueWithoutAdInput = {\n  where: BookingWhereUniqueInput;\n  update: BookingUpdateWithoutAdDataInput;\n  create: BookingCreateWithoutAdInput;\n};\n\nexport type AdUpsertWithoutBlockedDaysInput = {\n  update: AdUpdateWithoutBlockedDaysDataInput;\n  create: AdCreateWithoutBlockedDaysInput;\n};\n\nexport type UpdateAvailableInput = {\n  checkin: Scalars['DateTime'];\n  checkout: Scalars['DateTime'];\n  ops: OpsEnum;\n  adId: Scalars['String'];\n};\n\nexport enum OpsEnum {\n  Blocked = 'BLOCKED',\n  Available = 'AVAILABLE'\n}\n\nexport type UpdateAvailabilityMutationVariables = Exact<{\n  data: UpdateAvailableInput;\n}>;\n\n\nexport type UpdateAvailabilityMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'updateAvailability'>\n);\n\nexport type CreateBookingMutationVariables = Exact<{\n  checkin: Scalars['DateTime'];\n  checkout: Scalars['DateTime'];\n  clientId: Scalars['String'];\n  pax: Scalars['Int'];\n  adId: Scalars['String'];\n}>;\n\n\nexport type CreateBookingMutation = (\n  { __typename?: 'Mutation' }\n  & { createBooking: (\n    { __typename?: 'Booking' }\n    & Pick<Booking, 'id' | 'checkin' | 'checkout' | 'totalPaid' | 'createdAt'>\n  ) }\n);\n\nexport type ListAdsQueryVariables = Exact<{\n  orderBy?: Maybe<AdOrderByInput>;\n  first?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type ListAdsQuery = (\n  { __typename?: 'Query' }\n  & { ads: Array<Maybe<(\n    { __typename?: 'Ad' }\n    & Pick<Ad, 'id' | 'title' | 'description' | 'image' | 'price' | 'ranking' | 'createdAt'>\n    & { host: (\n      { __typename?: 'User' }\n      & Pick<User, 'fullName'>\n    ) }\n  )>> }\n);\n\nexport type SelectAdByIdQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\n\nexport type SelectAdByIdQuery = (\n  { __typename?: 'Query' }\n  & { ad?: Maybe<(\n    { __typename?: 'Ad' }\n    & Pick<Ad, 'id' | 'title' | 'description' | 'image' | 'price' | 'ranking'>\n    & { blockedDays: Array<(\n      { __typename?: 'BlockedDay' }\n      & Pick<BlockedDay, 'checkin' | 'checkout' | 'byBooking'>\n    )> }\n  )> }\n);\n\nexport type CurrentAvailabilityQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CurrentAvailabilityQuery = (\n  { __typename?: 'Query' }\n  & { currentAvailability?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id'>\n    & { ad?: Maybe<(\n      { __typename?: 'Ad' }\n      & Pick<Ad, 'id' | 'title' | 'ranking'>\n      & { blockedDays: Array<(\n        { __typename?: 'BlockedDay' }\n        & Pick<BlockedDay, 'id' | 'checkin' | 'checkout' | 'byBooking'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type SignUpMutationVariables = Exact<{\n  email: Scalars['String'];\n  fullName: Scalars['String'];\n  password: Scalars['String'];\n  phone: Scalars['String'];\n}>;\n\n\nexport type SignUpMutation = (\n  { __typename?: 'Mutation' }\n  & { signUp?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'password' | 'role' | 'createdAt' | 'token'>\n  )> }\n);\n\nexport type SignInMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\n\nexport type SignInMutation = (\n  { __typename?: 'Mutation' }\n  & { signIn?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'fullName' | 'createdAt' | 'role' | 'token'>\n  )> }\n);\n\nexport type CurrentUserQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CurrentUserQuery = (\n  { __typename?: 'Query' }\n  & { currentUser?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'fullName' | 'password' | 'createdAt' | 'role' | 'phone' | 'token'>\n  )> }\n);\n\nexport type CurrentUserBookingsQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CurrentUserBookingsQuery = (\n  { __typename?: 'Query' }\n  & { currentUser?: Maybe<(\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email' | 'fullName' | 'createdAt' | 'role' | 'phone' | 'token'>\n    & { bookings: Array<(\n      { __typename?: 'Booking' }\n      & Pick<Booking, 'id' | 'checkin' | 'checkout' | 'totalPaid' | 'createdAt'>\n      & { client: (\n        { __typename?: 'User' }\n        & Pick<User, 'email' | 'fullName' | 'role'>\n      ), ad: (\n        { __typename?: 'Ad' }\n        & Pick<Ad, 'title' | 'description' | 'image' | 'createdAt'>\n        & { host: (\n          { __typename?: 'User' }\n          & Pick<User, 'email' | 'fullName'>\n        ) }\n      ) }\n    )> }\n  )> }\n);\n\n\nexport const UpdateAvailabilityDocument = gql`\n    mutation updateAvailability($data: UpdateAvailableInput!) {\n  updateAvailability(data: $data)\n}\n    `;\nexport type UpdateAvailabilityMutationFn = ApolloReactCommon.MutationFunction<UpdateAvailabilityMutation, UpdateAvailabilityMutationVariables>;\n\n/**\n * __useUpdateAvailabilityMutation__\n *\n * To run a mutation, you first call `useUpdateAvailabilityMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAvailabilityMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAvailabilityMutation, { data, loading, error }] = useUpdateAvailabilityMutation({\n *   variables: {\n *      data: // value for 'data'\n *   },\n * });\n */\nexport function useUpdateAvailabilityMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateAvailabilityMutation, UpdateAvailabilityMutationVariables>) {\n        return ApolloReactHooks.useMutation<UpdateAvailabilityMutation, UpdateAvailabilityMutationVariables>(UpdateAvailabilityDocument, baseOptions);\n      }\nexport type UpdateAvailabilityMutationHookResult = ReturnType<typeof useUpdateAvailabilityMutation>;\nexport type UpdateAvailabilityMutationResult = ApolloReactCommon.MutationResult<UpdateAvailabilityMutation>;\nexport type UpdateAvailabilityMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateAvailabilityMutation, UpdateAvailabilityMutationVariables>;\nexport const CreateBookingDocument = gql`\n    mutation CreateBooking($checkin: DateTime!, $checkout: DateTime!, $clientId: String!, $pax: Int!, $adId: String!) {\n  createBooking(data: {checkin: $checkin, checkout: $checkout, clientId: $clientId, pax: $pax, adId: $adId}) {\n    id\n    checkin\n    checkout\n    totalPaid\n    createdAt\n  }\n}\n    `;\nexport type CreateBookingMutationFn = ApolloReactCommon.MutationFunction<CreateBookingMutation, CreateBookingMutationVariables>;\n\n/**\n * __useCreateBookingMutation__\n *\n * To run a mutation, you first call `useCreateBookingMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateBookingMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createBookingMutation, { data, loading, error }] = useCreateBookingMutation({\n *   variables: {\n *      checkin: // value for 'checkin'\n *      checkout: // value for 'checkout'\n *      clientId: // value for 'clientId'\n *      pax: // value for 'pax'\n *      adId: // value for 'adId'\n *   },\n * });\n */\nexport function useCreateBookingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateBookingMutation, CreateBookingMutationVariables>) {\n        return ApolloReactHooks.useMutation<CreateBookingMutation, CreateBookingMutationVariables>(CreateBookingDocument, baseOptions);\n      }\nexport type CreateBookingMutationHookResult = ReturnType<typeof useCreateBookingMutation>;\nexport type CreateBookingMutationResult = ApolloReactCommon.MutationResult<CreateBookingMutation>;\nexport type CreateBookingMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateBookingMutation, CreateBookingMutationVariables>;\nexport const ListAdsDocument = gql`\n    query listAds($orderBy: AdOrderByInput, $first: Int) {\n  ads(orderBy: $orderBy, first: $first) {\n    id\n    title\n    description\n    image\n    price\n    ranking\n    host {\n      fullName\n    }\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useListAdsQuery__\n *\n * To run a query within a React component, call `useListAdsQuery` and pass it any options that fit your needs.\n * When your component renders, `useListAdsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useListAdsQuery({\n *   variables: {\n *      orderBy: // value for 'orderBy'\n *      first: // value for 'first'\n *   },\n * });\n */\nexport function useListAdsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ListAdsQuery, ListAdsQueryVariables>) {\n        return ApolloReactHooks.useQuery<ListAdsQuery, ListAdsQueryVariables>(ListAdsDocument, baseOptions);\n      }\nexport function useListAdsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ListAdsQuery, ListAdsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<ListAdsQuery, ListAdsQueryVariables>(ListAdsDocument, baseOptions);\n        }\nexport type ListAdsQueryHookResult = ReturnType<typeof useListAdsQuery>;\nexport type ListAdsLazyQueryHookResult = ReturnType<typeof useListAdsLazyQuery>;\nexport type ListAdsQueryResult = ApolloReactCommon.QueryResult<ListAdsQuery, ListAdsQueryVariables>;\nexport const SelectAdByIdDocument = gql`\n    query selectAdById($id: ID!) {\n  ad(where: {id: $id}) {\n    id\n    title\n    description\n    image\n    price\n    ranking\n    blockedDays {\n      checkin\n      checkout\n      byBooking\n    }\n  }\n}\n    `;\n\n/**\n * __useSelectAdByIdQuery__\n *\n * To run a query within a React component, call `useSelectAdByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useSelectAdByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSelectAdByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useSelectAdByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SelectAdByIdQuery, SelectAdByIdQueryVariables>) {\n        return ApolloReactHooks.useQuery<SelectAdByIdQuery, SelectAdByIdQueryVariables>(SelectAdByIdDocument, baseOptions);\n      }\nexport function useSelectAdByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SelectAdByIdQuery, SelectAdByIdQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<SelectAdByIdQuery, SelectAdByIdQueryVariables>(SelectAdByIdDocument, baseOptions);\n        }\nexport type SelectAdByIdQueryHookResult = ReturnType<typeof useSelectAdByIdQuery>;\nexport type SelectAdByIdLazyQueryHookResult = ReturnType<typeof useSelectAdByIdLazyQuery>;\nexport type SelectAdByIdQueryResult = ApolloReactCommon.QueryResult<SelectAdByIdQuery, SelectAdByIdQueryVariables>;\nexport const CurrentAvailabilityDocument = gql`\n    query currentAvailability {\n  currentAvailability: currentUser {\n    id\n    ad {\n      id\n      title\n      ranking\n      blockedDays {\n        id\n        checkin\n        checkout\n        byBooking\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useCurrentAvailabilityQuery__\n *\n * To run a query within a React component, call `useCurrentAvailabilityQuery` and pass it any options that fit your needs.\n * When your component renders, `useCurrentAvailabilityQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCurrentAvailabilityQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCurrentAvailabilityQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CurrentAvailabilityQuery, CurrentAvailabilityQueryVariables>) {\n        return ApolloReactHooks.useQuery<CurrentAvailabilityQuery, CurrentAvailabilityQueryVariables>(CurrentAvailabilityDocument, baseOptions);\n      }\nexport function useCurrentAvailabilityLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CurrentAvailabilityQuery, CurrentAvailabilityQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CurrentAvailabilityQuery, CurrentAvailabilityQueryVariables>(CurrentAvailabilityDocument, baseOptions);\n        }\nexport type CurrentAvailabilityQueryHookResult = ReturnType<typeof useCurrentAvailabilityQuery>;\nexport type CurrentAvailabilityLazyQueryHookResult = ReturnType<typeof useCurrentAvailabilityLazyQuery>;\nexport type CurrentAvailabilityQueryResult = ApolloReactCommon.QueryResult<CurrentAvailabilityQuery, CurrentAvailabilityQueryVariables>;\nexport const SignUpDocument = gql`\n    mutation signUp($email: String!, $fullName: String!, $password: String!, $phone: String!) {\n  signUp(data: {email: $email, fullName: $fullName, password: $password, phone: $phone}) {\n    id\n    email\n    password\n    role\n    createdAt\n    token\n  }\n}\n    `;\nexport type SignUpMutationFn = ApolloReactCommon.MutationFunction<SignUpMutation, SignUpMutationVariables>;\n\n/**\n * __useSignUpMutation__\n *\n * To run a mutation, you first call `useSignUpMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignUpMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signUpMutation, { data, loading, error }] = useSignUpMutation({\n *   variables: {\n *      email: // value for 'email'\n *      fullName: // value for 'fullName'\n *      password: // value for 'password'\n *      phone: // value for 'phone'\n *   },\n * });\n */\nexport function useSignUpMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignUpMutation, SignUpMutationVariables>) {\n        return ApolloReactHooks.useMutation<SignUpMutation, SignUpMutationVariables>(SignUpDocument, baseOptions);\n      }\nexport type SignUpMutationHookResult = ReturnType<typeof useSignUpMutation>;\nexport type SignUpMutationResult = ApolloReactCommon.MutationResult<SignUpMutation>;\nexport type SignUpMutationOptions = ApolloReactCommon.BaseMutationOptions<SignUpMutation, SignUpMutationVariables>;\nexport const SignInDocument = gql`\n    mutation signIn($email: String!, $password: String!) {\n  signIn(data: {email: $email, password: $password}) {\n    id\n    email\n    fullName\n    createdAt\n    role\n    token\n  }\n}\n    `;\nexport type SignInMutationFn = ApolloReactCommon.MutationFunction<SignInMutation, SignInMutationVariables>;\n\n/**\n * __useSignInMutation__\n *\n * To run a mutation, you first call `useSignInMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSignInMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [signInMutation, { data, loading, error }] = useSignInMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useSignInMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SignInMutation, SignInMutationVariables>) {\n        return ApolloReactHooks.useMutation<SignInMutation, SignInMutationVariables>(SignInDocument, baseOptions);\n      }\nexport type SignInMutationHookResult = ReturnType<typeof useSignInMutation>;\nexport type SignInMutationResult = ApolloReactCommon.MutationResult<SignInMutation>;\nexport type SignInMutationOptions = ApolloReactCommon.BaseMutationOptions<SignInMutation, SignInMutationVariables>;\nexport const CurrentUserDocument = gql`\n    query currentUser {\n  currentUser {\n    id\n    email\n    fullName\n    password\n    createdAt\n    role\n    phone\n    token\n  }\n}\n    `;\n\n/**\n * __useCurrentUserQuery__\n *\n * To run a query within a React component, call `useCurrentUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCurrentUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCurrentUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {\n        return ApolloReactHooks.useQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, baseOptions);\n      }\nexport function useCurrentUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CurrentUserQuery, CurrentUserQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CurrentUserQuery, CurrentUserQueryVariables>(CurrentUserDocument, baseOptions);\n        }\nexport type CurrentUserQueryHookResult = ReturnType<typeof useCurrentUserQuery>;\nexport type CurrentUserLazyQueryHookResult = ReturnType<typeof useCurrentUserLazyQuery>;\nexport type CurrentUserQueryResult = ApolloReactCommon.QueryResult<CurrentUserQuery, CurrentUserQueryVariables>;\nexport const CurrentUserBookingsDocument = gql`\n    query currentUserBookings {\n  currentUser {\n    id\n    email\n    fullName\n    createdAt\n    role\n    phone\n    token\n    bookings {\n      id\n      checkin\n      checkout\n      totalPaid\n      createdAt\n      client {\n        email\n        fullName\n        role\n      }\n      ad {\n        title\n        description\n        image\n        createdAt\n        host {\n          email\n          fullName\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useCurrentUserBookingsQuery__\n *\n * To run a query within a React component, call `useCurrentUserBookingsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCurrentUserBookingsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCurrentUserBookingsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCurrentUserBookingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CurrentUserBookingsQuery, CurrentUserBookingsQueryVariables>) {\n        return ApolloReactHooks.useQuery<CurrentUserBookingsQuery, CurrentUserBookingsQueryVariables>(CurrentUserBookingsDocument, baseOptions);\n      }\nexport function useCurrentUserBookingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CurrentUserBookingsQuery, CurrentUserBookingsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CurrentUserBookingsQuery, CurrentUserBookingsQueryVariables>(CurrentUserBookingsDocument, baseOptions);\n        }\nexport type CurrentUserBookingsQueryHookResult = ReturnType<typeof useCurrentUserBookingsQuery>;\nexport type CurrentUserBookingsLazyQueryHookResult = ReturnType<typeof useCurrentUserBookingsLazyQuery>;\nexport type CurrentUserBookingsQueryResult = ApolloReactCommon.QueryResult<CurrentUserBookingsQuery, CurrentUserBookingsQueryVariables>;\n\n      export interface IntrospectionResultData {\n        __schema: {\n          types: {\n            kind: string;\n            name: string;\n            possibleTypes: {\n              name: string;\n            }[];\n          }[];\n        };\n      }\n      const result: IntrospectionResultData = {\n  \"__schema\": {\n    \"types\": []\n  }\n};\n      export default result;\n    ","import { lazy } from 'react';\n\nconst routesDefinition = [\n  {\n    exact: true,\n    path: \"/login\",\n    component: lazy(() => import('../page/LoginPage')),\n    needLoggedIn: false,\n  },\n  {\n    exact: true,\n    path: \"/sign-up\",\n    component: lazy(() => import('../page/Signup')),\n    needLoggedIn: false,\n  },\n  {\n    exact: true,\n    path: \"/\",\n    component: lazy(() => import('../page/Home')),\n    needLoggedIn: false,\n  },\n  {\n    exact: true,\n    path: \"/profile\",\n    component: lazy(() => import('../page/Profile')),\n    needLoggedIn: true,\n  },\n  {\n    exact: true,\n    path: \"/details-ad/:id\",\n    component: lazy(() => import('../page/AdPage')),\n    needLoggedIn: false,\n  },\n  {\n    exact: true,\n    path: \"/bookings\",\n    component: lazy(() => import('../page/BookingsPage')),\n    needLoggedIn: true,\n  },\n  {\n    exact: true,\n    path: \"/available\",\n    component: lazy(() => import('../page/AvailablePage')),\n    needLoggedIn: true,\n  }\n];\n\nexport default routesDefinition;","export const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\nexport const NAME_REQUIRED = 'Name is required';\nexport const EMAIL_REQUIRED = 'Email is required';\nexport const EMAIL_INCORRECT = 'Incorrect email';\nexport const PHONE_REQUIRED = 'Phone is required';\nexport const INVALID_PHONE = 'Phone is invalid';\nexport const PASSWORD_REQUIRED = 'Password is required';\nexport const CONFIRM_PASSWORD_REQUIRED = 'Confirm password is required';\nexport const MATCH_PASSWORD = 'Passwords must match';\nexport const emailRegExp = /^[a-zA-Z0-9_\\-\\.]+@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\nexport const NO_DATA = \"There is no data to show\"\nexport const NOT_FOUND = 'not found';\nexport const PER_NIGHT = 'per night';\nexport const REQUIRED_RANGE = 'Range must be selected!!';\nexport const BOOK_NOW = 'Book Now!';\nexport const SUBMIT = 'Submit';\nexport const CREATE_AT = 'Created at';\nexport const RESERVED_AT = 'Reserved at'\nexport const LOREM_TITLE = 'Lorem ipsum dolor sit amet';\nexport const LOREM_BODY = 'Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod';\nexport const REGISTERED = 'Already have an account ?';\nexport const CLICK_ME = 'click here';\n\nexport const MOST_POPULAR_SUBTITLE = 'The most chosen by our clients';\nexport const MOST_POPULAR = \"The most popular\";\n\nexport const THE_CHEAPEST = 'the cheapest';\nexport const THE_CHEAPEST_SUBTITLE = \"stay cheap\";\n\nexport const ALL_ADS = 'All ads';\nexport const ALL_ADS_SUBTITLE = \"our best lodgings\";\n\nexport const BLOCKED = 'Blocked';\nexport const AVAILABLE = 'Available';\nexport const UNDEFINED = 'Undefined';\nexport const AVAILABILITY = 'Availability';\nexport const ACTION_VALIDATE = 'Must select an option';\nexport const PAX_VALIDATE = 'Pax must be greater than zero';\nexport const INFO_SEVERITY_VALUE = 'info';\nexport const ERROR_SEVERITY_VALUE = 'error';\n\n/*CALENDAR*/\nexport const DATE_FORMAT = 'YYYY-MM-DD';\nexport const FULL_EDITABLE_MODE = 'FULL_EDITABLE_MODE';\nexport const EDITABLE_MODE = 'EDITABLE_MODE';\nexport const WEEK_DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n","import { styled } from '@material-ui/styles';\nimport { Theme } from '@material-ui/core';\nimport customTheme from '../theme';\n\nexport default styled('div')(({ theme }: { theme: Theme }) => ({\n  maxWidth: `${customTheme.dimension.width.wLayout}`,\n  marginRight: customTheme.spacing.margin.bigger,\n  marginLeft: customTheme.spacing.margin.bigger,\n  [theme.breakpoints.down('xs')]: {\n    marginRight: customTheme.spacing.margin.none,\n    marginLeft: customTheme.spacing.margin.none,\n  },\n}));\n","import { get, remove } from 'local-storage';\n\nexport const loggedIn: () => string | undefined = () => get('userToken');\n\nexport const signOut: () => void = () => remove('userToken');\n","import { SvgIcon, Theme } from '@material-ui/core';\nimport { makeStyles, styled } from '@material-ui/styles';\nimport React, { FC } from 'react';\nimport customTheme from '../../theme';\n\nconst BrandContainer = styled('div')({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  paddingRight: customTheme.spacing.padding.none,\n});\n\nconst Brand: FC<{}> = () => {\n  const classes = useStyles();\n  return (\n    <BrandContainer>\n      <SvgIcon className={classes.icon}>\n        <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\n      </SvgIcon>\n    </BrandContainer>\n  );\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  icon: {\n    margin: theme.spacing(1),\n    color: theme.palette.primary.main,\n  },\n}));\n\nexport default Brand;\n","import Button, { ButtonProps } from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/styles';\nimport React, { FC } from 'react';\nimport { NavLink, NavLinkProps } from 'react-router-dom';\nimport customTheme from '../../theme';\n\nconst Link: FC<ButtonProps & NavLinkProps> = (props) => {\n  const classes = useStyles();\n  return (\n    <Button\n      classes={{ root: classes.navLink }}\n      component={({ innerRef, ...innerProps }: any) => (\n        <NavLink {...props} {...innerProps} />\n      )}\n      {...props}\n    />\n  );\n};\n\nconst useStyles = makeStyles({\n  navLink: {\n    paddingLeft: customTheme.spacing.padding.small,\n    paddingRight: customTheme.spacing.padding.small,\n  },\n});\n\nexport default Link;\n","import { AppBar, Theme, Toolbar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/styles';\nimport React, { FC } from 'react';\nimport customTheme from '../../theme';\nimport Brand from '../svg/Brand';\nimport FakeNavLink from './FakeNavLink';\nimport NavLink from './NavLink';\n\nexport interface Menu {\n  path: string;\n  title: string;\n  onClick?: () => void;\n}\ninterface Props {\n  userName?: string;\n  links: Menu[];\n}\n\nconst Header: FC<Props> = ({ links, userName }) => {\n  const classes = useStyles();\n\n  return (\n    <AppBar className={classes.appBar} position=\"sticky\">\n      <Toolbar className={classes.toolbar}>\n        <div>\n          <NavLink className={classes.navLink} exact={true} to=\"/\">\n            <Brand />\n          </NavLink>\n          <NavLink exact={true} to=\"/profile\">\n            {userName}\n          </NavLink>\n        </div>\n        <div>\n          {links.map(({ path, title, onClick }, i) =>\n            onClick ? (\n              <FakeNavLink key={i} onClick={onClick}>{title}</FakeNavLink>\n            ) : (\n              <NavLink key={i} to={path}>{title}</NavLink>\n            ),\n          )}\n        </div>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nconst useStyles = makeStyles((theme: Theme) => {\n  const spacing = {\n    paddingLeft: customTheme.spacing.padding.none,\n    paddingRight: customTheme.spacing.padding.none,\n    margin: customTheme.spacing.margin.none,\n  };\n\n  return {\n    appBar: {\n      backgroundColor: theme.palette.background.default,\n      boxShadow: 'unset',\n      ...spacing,\n    },\n    toolbar: {\n      ...spacing,\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n    navLink: {\n      paddingRight: customTheme.spacing.padding.none,\n    },\n  };\n});\n\nexport default Header;","import Header from './Header';\n\nexport default Header;\n","import { useApolloClient } from '@apollo/react-hooks';\nimport React, { FC, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport AppHeader from '../component/Header';\nimport { Menu } from '../component/Header/Header';\nimport { useCurrentUserQuery } from '../generate/types';\nimport { loggedIn, signOut } from '../utils/auth';\n\nconst Header: FC = () => {\n  const client = useApolloClient();\n  const { data } = useCurrentUserQuery({\n    fetchPolicy: 'cache-first',\n    errorPolicy: 'all',\n  });\n\n  const isHost = useMemo(() => data?.currentUser?.role === 'HOST', [data]);\n\n  const { push } = useHistory();\n  const auth = loggedIn();\n  const links: Menu[] = [\n    {\n      path: '/',\n      title: 'Home',\n    },\n  ];\n\n  auth &&\n    links.push({\n      path: '/profile',\n      title: 'Profile',\n    });\n\n  auth &&\n    !isHost &&\n    links.push({\n      path: '/bookings',\n      title: 'Booking',\n    });\n\n  auth &&\n    isHost &&\n    links.push({\n      path: '/available',\n      title: 'Available',\n    });\n\n  !auth &&\n    links.push({\n      path: '/sign-up',\n      title: 'Sign Up',\n    });\n\n  links.push({\n    path: auth ? '/' : '/login',\n    title: auth ? 'Sign out' : 'Sign in',\n    onClick: () => {\n      signOut();\n      client.resetStore();\n      push(auth ? '/' : '/login');\n    },\n  });\n\n  return <AppHeader userName={data?.currentUser?.fullName} links={links} />;\n};\n\nexport default Header;\n","import React, { useMemo } from 'react';\nimport PageLayout from '../component/PageLayout';\nimport { useHistory, Redirect } from 'react-router-dom';\nimport routesDefinition from '../routes/routesDefinition';\nimport { loggedIn } from '../utils/auth';\nimport AppHeader from './Header';\n\nconst ContainerPage = ({children}: React.PropsWithChildren<{}>) => {\n  const { location: { pathname } } = useHistory();\n  const redirectToLogin = useMemo(\n    () => {\n      const currentRoute = routesDefinition.find(({ path })=> path === pathname);\n      return currentRoute?.needLoggedIn && !loggedIn();\n    },\n    [pathname],\n  )\n\n  if(redirectToLogin) {\n    return <Redirect to={\"/login\"} />\n  }\n\n  return (\n    <PageLayout>\n      <AppHeader />\n      {children}\n    </PageLayout>\n    )};\n\nexport default ContainerPage;","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { ButtonProps } from '@material-ui/core/Button';\n\nconst FakeNavLink = (props: ButtonProps) => <Button {...props} />;\n\nexport default FakeNavLink;\n"],"sourceRoot":""}